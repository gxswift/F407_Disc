ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lv_img_cache.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata._lv_img_cache_open.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 6C76676C 		.ascii	"lvgl/lvgl/src/draw/lv_img_cache.c\000"
  20      2F6C7667 
  20      6C2F7372 
  20      632F6472 
  20      61772F6C 
  21 0022 0000     		.align	2
  22              	.LC1:
  23 0024 496D6167 		.ascii	"Image draw cannot open the image resource\000"
  23      65206472 
  23      61772063 
  23      616E6E6F 
  23      74206F70 
  24              		.section	.text._lv_img_cache_open,"ax",%progbits
  25              		.align	1
  26              		.global	_lv_img_cache_open
  27              		.arch armv7e-m
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  31              		.fpu fpv4-sp-d16
  33              	_lv_img_cache_open:
  34              	.LVL0:
  35              	.LFB52:
  36              		.file 1 "lvgl/lvgl/src/draw/lv_img_cache.c"
   1:lvgl/lvgl/src/draw/lv_img_cache.c **** /**
   2:lvgl/lvgl/src/draw/lv_img_cache.c ****  * @file lv_img_cache.c
   3:lvgl/lvgl/src/draw/lv_img_cache.c ****  *
   4:lvgl/lvgl/src/draw/lv_img_cache.c ****  */
   5:lvgl/lvgl/src/draw/lv_img_cache.c **** 
   6:lvgl/lvgl/src/draw/lv_img_cache.c **** /*********************
   7:lvgl/lvgl/src/draw/lv_img_cache.c ****  *      INCLUDES
   8:lvgl/lvgl/src/draw/lv_img_cache.c ****  *********************/
   9:lvgl/lvgl/src/draw/lv_img_cache.c **** #include "../misc/lv_assert.h"
  10:lvgl/lvgl/src/draw/lv_img_cache.c **** #include "lv_img_cache.h"
  11:lvgl/lvgl/src/draw/lv_img_cache.c **** #include "lv_img_decoder.h"
  12:lvgl/lvgl/src/draw/lv_img_cache.c **** #include "lv_draw_img.h"
  13:lvgl/lvgl/src/draw/lv_img_cache.c **** #include "../hal/lv_hal_tick.h"
  14:lvgl/lvgl/src/draw/lv_img_cache.c **** #include "../misc/lv_gc.h"
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 2


  15:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  16:lvgl/lvgl/src/draw/lv_img_cache.c **** /*********************
  17:lvgl/lvgl/src/draw/lv_img_cache.c ****  *      DEFINES
  18:lvgl/lvgl/src/draw/lv_img_cache.c ****  *********************/
  19:lvgl/lvgl/src/draw/lv_img_cache.c **** /*Decrement life with this value on every open*/
  20:lvgl/lvgl/src/draw/lv_img_cache.c **** #define LV_IMG_CACHE_AGING 1
  21:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  22:lvgl/lvgl/src/draw/lv_img_cache.c **** /*Boost life by this factor (multiply time_to_open with this value)*/
  23:lvgl/lvgl/src/draw/lv_img_cache.c **** #define LV_IMG_CACHE_LIFE_GAIN 1
  24:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  25:lvgl/lvgl/src/draw/lv_img_cache.c **** /*Don't let life to be greater than this limit because it would require a lot of time to
  26:lvgl/lvgl/src/draw/lv_img_cache.c ****  * "die" from very high values*/
  27:lvgl/lvgl/src/draw/lv_img_cache.c **** #define LV_IMG_CACHE_LIFE_LIMIT 1000
  28:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  29:lvgl/lvgl/src/draw/lv_img_cache.c **** /**********************
  30:lvgl/lvgl/src/draw/lv_img_cache.c ****  *      TYPEDEFS
  31:lvgl/lvgl/src/draw/lv_img_cache.c ****  **********************/
  32:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  33:lvgl/lvgl/src/draw/lv_img_cache.c **** /**********************
  34:lvgl/lvgl/src/draw/lv_img_cache.c ****  *  STATIC PROTOTYPES
  35:lvgl/lvgl/src/draw/lv_img_cache.c ****  **********************/
  36:lvgl/lvgl/src/draw/lv_img_cache.c **** #if LV_IMG_CACHE_DEF_SIZE
  37:lvgl/lvgl/src/draw/lv_img_cache.c ****     static bool lv_img_cache_match(const void * src1, const void * src2);
  38:lvgl/lvgl/src/draw/lv_img_cache.c **** #endif
  39:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  40:lvgl/lvgl/src/draw/lv_img_cache.c **** /**********************
  41:lvgl/lvgl/src/draw/lv_img_cache.c ****  *  STATIC VARIABLES
  42:lvgl/lvgl/src/draw/lv_img_cache.c ****  **********************/
  43:lvgl/lvgl/src/draw/lv_img_cache.c **** #if LV_IMG_CACHE_DEF_SIZE
  44:lvgl/lvgl/src/draw/lv_img_cache.c ****     static uint16_t entry_cnt;
  45:lvgl/lvgl/src/draw/lv_img_cache.c **** #endif
  46:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  47:lvgl/lvgl/src/draw/lv_img_cache.c **** /**********************
  48:lvgl/lvgl/src/draw/lv_img_cache.c ****  *      MACROS
  49:lvgl/lvgl/src/draw/lv_img_cache.c ****  **********************/
  50:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  51:lvgl/lvgl/src/draw/lv_img_cache.c **** /**********************
  52:lvgl/lvgl/src/draw/lv_img_cache.c ****  *   GLOBAL FUNCTIONS
  53:lvgl/lvgl/src/draw/lv_img_cache.c ****  **********************/
  54:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  55:lvgl/lvgl/src/draw/lv_img_cache.c **** /**
  56:lvgl/lvgl/src/draw/lv_img_cache.c ****  * Open an image using the image decoder interface and cache it.
  57:lvgl/lvgl/src/draw/lv_img_cache.c ****  * The image will be left open meaning if the image decoder open callback allocated memory then it 
  58:lvgl/lvgl/src/draw/lv_img_cache.c ****  * The image is closed if a new image is opened and the new image takes its place in the cache.
  59:lvgl/lvgl/src/draw/lv_img_cache.c ****  * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
  60:lvgl/lvgl/src/draw/lv_img_cache.c ****  * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
  61:lvgl/lvgl/src/draw/lv_img_cache.c ****  * @return pointer to the cache entry or NULL if can open the image
  62:lvgl/lvgl/src/draw/lv_img_cache.c ****  */
  63:lvgl/lvgl/src/draw/lv_img_cache.c **** _lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
  64:lvgl/lvgl/src/draw/lv_img_cache.c **** {
  37              		.loc 1 64 1 view -0
  38              		.cfi_startproc
  39              		@ args = 0, pretend = 0, frame = 0
  40              		@ frame_needed = 0, uses_anonymous_args = 0
  41              		.loc 1 64 1 is_stmt 0 view .LVU1
  42 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  43              	.LCFI0:
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 3


  44              		.cfi_def_cfa_offset 20
  45              		.cfi_offset 4, -20
  46              		.cfi_offset 5, -16
  47              		.cfi_offset 6, -12
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 83B0     		sub	sp, sp, #12
  51              	.LCFI1:
  52              		.cfi_def_cfa_offset 32
  53 0004 0446     		mov	r4, r0
  54 0006 0D46     		mov	r5, r1	@ movhi
  55              	.LVL1:
  56              		.loc 1 64 1 view .LVU2
  57 0008 1646     		mov	r6, r2
  65:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Is the image cached?*/
  66:lvgl/lvgl/src/draw/lv_img_cache.c ****     _lv_img_cache_entry_t * cached_src = NULL;
  58              		.loc 1 66 5 is_stmt 1 view .LVU3
  59              	.LVL2:
  67:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  68:lvgl/lvgl/src/draw/lv_img_cache.c **** #if LV_IMG_CACHE_DEF_SIZE
  69:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(entry_cnt == 0) {
  70:lvgl/lvgl/src/draw/lv_img_cache.c ****         LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
  71:lvgl/lvgl/src/draw/lv_img_cache.c ****         return NULL;
  72:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
  73:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  74:lvgl/lvgl/src/draw/lv_img_cache.c ****     _lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  75:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  76:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Decrement all lifes. Make the entries older*/
  77:lvgl/lvgl/src/draw/lv_img_cache.c ****     uint16_t i;
  78:lvgl/lvgl/src/draw/lv_img_cache.c ****     for(i = 0; i < entry_cnt; i++) {
  79:lvgl/lvgl/src/draw/lv_img_cache.c ****         if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  80:lvgl/lvgl/src/draw/lv_img_cache.c ****             cache[i].life -= LV_IMG_CACHE_AGING;
  81:lvgl/lvgl/src/draw/lv_img_cache.c ****         }
  82:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
  83:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  84:lvgl/lvgl/src/draw/lv_img_cache.c ****     for(i = 0; i < entry_cnt; i++) {
  85:lvgl/lvgl/src/draw/lv_img_cache.c ****         if(color.full == cache[i].dec_dsc.color.full &&
  86:lvgl/lvgl/src/draw/lv_img_cache.c ****            frame_id == cache[i].dec_dsc.frame_id &&
  87:lvgl/lvgl/src/draw/lv_img_cache.c ****            lv_img_cache_match(src, cache[i].dec_dsc.src)) {
  88:lvgl/lvgl/src/draw/lv_img_cache.c ****             /*If opened increment its life.
  89:lvgl/lvgl/src/draw/lv_img_cache.c ****              *Image difficult to open should live longer to keep avoid frequent their recaching.
  90:lvgl/lvgl/src/draw/lv_img_cache.c ****              *Therefore increase `life` with `time_to_open`*/
  91:lvgl/lvgl/src/draw/lv_img_cache.c ****             cached_src = &cache[i];
  92:lvgl/lvgl/src/draw/lv_img_cache.c ****             cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  93:lvgl/lvgl/src/draw/lv_img_cache.c ****             if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIM
  94:lvgl/lvgl/src/draw/lv_img_cache.c ****             LV_LOG_TRACE("image source found in the cache");
  95:lvgl/lvgl/src/draw/lv_img_cache.c ****             break;
  96:lvgl/lvgl/src/draw/lv_img_cache.c ****         }
  97:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
  98:lvgl/lvgl/src/draw/lv_img_cache.c **** 
  99:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*The image is not cached then cache it now*/
 100:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(cached_src) return cached_src;
 101:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 102:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Find an entry to reuse. Select the entry with the least life*/
 103:lvgl/lvgl/src/draw/lv_img_cache.c ****     cached_src = &cache[0];
 104:lvgl/lvgl/src/draw/lv_img_cache.c ****     for(i = 1; i < entry_cnt; i++) {
 105:lvgl/lvgl/src/draw/lv_img_cache.c ****         if(cache[i].life < cached_src->life) {
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 4


 106:lvgl/lvgl/src/draw/lv_img_cache.c ****             cached_src = &cache[i];
 107:lvgl/lvgl/src/draw/lv_img_cache.c ****         }
 108:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 109:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 110:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Close the decoder to reuse if it was opened (has a valid source)*/
 111:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(cached_src->dec_dsc.src) {
 112:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_img_decoder_close(&cached_src->dec_dsc);
 113:lvgl/lvgl/src/draw/lv_img_cache.c ****         LV_LOG_INFO("image draw: cache miss, close and reuse an entry");
 114:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 115:lvgl/lvgl/src/draw/lv_img_cache.c ****     else {
 116:lvgl/lvgl/src/draw/lv_img_cache.c ****         LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
 117:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 118:lvgl/lvgl/src/draw/lv_img_cache.c **** #else
 119:lvgl/lvgl/src/draw/lv_img_cache.c ****     cached_src = &LV_GC_ROOT(_lv_img_cache_single);
  60              		.loc 1 119 5 view .LVU4
 120:lvgl/lvgl/src/draw/lv_img_cache.c **** #endif
 121:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Open the image and measure the time to open*/
 122:lvgl/lvgl/src/draw/lv_img_cache.c ****     uint32_t t_start  = lv_tick_get();
  61              		.loc 1 122 5 view .LVU5
  62              		.loc 1 122 25 is_stmt 0 view .LVU6
  63 000a FFF7FEFF 		bl	lv_tick_get
  64              	.LVL3:
  65              		.loc 1 122 25 view .LVU7
  66 000e 0746     		mov	r7, r0
  67              	.LVL4:
 123:lvgl/lvgl/src/draw/lv_img_cache.c ****     lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
  68              		.loc 1 123 5 is_stmt 1 view .LVU8
  69              		.loc 1 123 25 is_stmt 0 view .LVU9
  70 0010 3346     		mov	r3, r6
  71              	.LVL5:
  72              		.loc 1 123 25 view .LVU10
  73 0012 2A46     		mov	r2, r5	@ movhi
  74 0014 2146     		mov	r1, r4
  75 0016 1548     		ldr	r0, .L9
  76              	.LVL6:
  77              		.loc 1 123 25 view .LVU11
  78 0018 FFF7FEFF 		bl	lv_img_decoder_open
  79              	.LVL7:
 124:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(open_res == LV_RES_INV) {
  80              		.loc 1 124 5 is_stmt 1 view .LVU12
  81              		.loc 1 124 7 is_stmt 0 view .LVU13
  82 001c 60B1     		cbz	r0, .L7
 125:lvgl/lvgl/src/draw/lv_img_cache.c ****         LV_LOG_WARN("Image draw cannot open the image resource");
 126:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 127:lvgl/lvgl/src/draw/lv_img_cache.c ****         cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 128:lvgl/lvgl/src/draw/lv_img_cache.c ****         return NULL;
 129:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 130:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 131:lvgl/lvgl/src/draw/lv_img_cache.c ****     cached_src->life = 0;
  83              		.loc 1 131 5 is_stmt 1 view .LVU14
  84              		.loc 1 131 22 is_stmt 0 view .LVU15
  85 001e 134B     		ldr	r3, .L9
  86 0020 0022     		movs	r2, #0
  87 0022 9A62     		str	r2, [r3, #40]
 132:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 133:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*If `time_to_open` was not set in the open function set it here*/
 134:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(cached_src->dec_dsc.time_to_open == 0) {
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 5


  88              		.loc 1 134 5 is_stmt 1 view .LVU16
  89              		.loc 1 134 27 is_stmt 0 view .LVU17
  90 0024 DB69     		ldr	r3, [r3, #28]
  91              		.loc 1 134 7 view .LVU18
  92 0026 CBB1     		cbz	r3, .L8
  93              	.LVL8:
  94              	.L4:
 135:lvgl/lvgl/src/draw/lv_img_cache.c ****         cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 136:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 137:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 138:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  95              		.loc 1 138 5 is_stmt 1 view .LVU19
  96              		.loc 1 138 27 is_stmt 0 view .LVU20
  97 0028 104B     		ldr	r3, .L9
  98 002a DB69     		ldr	r3, [r3, #28]
  99              		.loc 1 138 7 view .LVU21
 100 002c E3B9     		cbnz	r3, .L5
 101              		.loc 1 138 47 is_stmt 1 discriminator 1 view .LVU22
 102              		.loc 1 138 80 is_stmt 0 discriminator 1 view .LVU23
 103 002e 0F48     		ldr	r0, .L9
 104 0030 0123     		movs	r3, #1
 105 0032 C361     		str	r3, [r0, #28]
 106              	.LVL9:
 107              	.L1:
 139:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 140:lvgl/lvgl/src/draw/lv_img_cache.c ****     return cached_src;
 141:lvgl/lvgl/src/draw/lv_img_cache.c **** }
 108              		.loc 1 141 1 view .LVU24
 109 0034 03B0     		add	sp, sp, #12
 110              	.LCFI2:
 111              		.cfi_remember_state
 112              		.cfi_def_cfa_offset 20
 113              		@ sp needed
 114 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 115              	.LVL10:
 116              	.L7:
 117              	.LCFI3:
 118              		.cfi_restore_state
 125:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 119              		.loc 1 125 9 is_stmt 1 view .LVU25
 120 0038 0D4B     		ldr	r3, .L9+4
 121 003a 0093     		str	r3, [sp]
 122 003c 0D4B     		ldr	r3, .L9+8
 123 003e 7D22     		movs	r2, #125
 124 0040 0D49     		ldr	r1, .L9+12
 125 0042 0220     		movs	r0, #2
 126              	.LVL11:
 125:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 127              		.loc 1 125 9 is_stmt 0 view .LVU26
 128 0044 FFF7FEFF 		bl	_lv_log_add
 129              	.LVL12:
 125:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 130              		.loc 1 125 65 is_stmt 1 view .LVU27
 126:lvgl/lvgl/src/draw/lv_img_cache.c ****         cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 131              		.loc 1 126 9 view .LVU28
 132 0048 084C     		ldr	r4, .L9
 133              	.LVL13:
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 6


 126:lvgl/lvgl/src/draw/lv_img_cache.c ****         cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 134              		.loc 1 126 9 is_stmt 0 view .LVU29
 135 004a 2C21     		movs	r1, #44
 136 004c 2046     		mov	r0, r4
 137 004e FFF7FEFF 		bl	lv_memset_00
 138              	.LVL14:
 127:lvgl/lvgl/src/draw/lv_img_cache.c ****         return NULL;
 139              		.loc 1 127 9 is_stmt 1 view .LVU30
 127:lvgl/lvgl/src/draw/lv_img_cache.c ****         return NULL;
 140              		.loc 1 127 26 is_stmt 0 view .LVU31
 141 0052 4FF00043 		mov	r3, #-2147483648
 142 0056 A362     		str	r3, [r4, #40]
 128:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 143              		.loc 1 128 9 is_stmt 1 view .LVU32
 128:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 144              		.loc 1 128 16 is_stmt 0 view .LVU33
 145 0058 0020     		movs	r0, #0
 146 005a EBE7     		b	.L1
 147              	.LVL15:
 148              	.L8:
 135:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 149              		.loc 1 135 9 is_stmt 1 view .LVU34
 135:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 150              		.loc 1 135 44 is_stmt 0 view .LVU35
 151 005c 3846     		mov	r0, r7
 152              	.LVL16:
 135:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 153              		.loc 1 135 44 view .LVU36
 154 005e FFF7FEFF 		bl	lv_tick_elaps
 155              	.LVL17:
 135:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 156              		.loc 1 135 42 view .LVU37
 157 0062 024B     		ldr	r3, .L9
 158 0064 D861     		str	r0, [r3, #28]
 159 0066 DFE7     		b	.L4
 160              	.L5:
 140:lvgl/lvgl/src/draw/lv_img_cache.c **** }
 161              		.loc 1 140 12 view .LVU38
 162 0068 0048     		ldr	r0, .L9
 163 006a E3E7     		b	.L1
 164              	.L10:
 165              		.align	2
 166              	.L9:
 167 006c 00000000 		.word	_lv_img_cache_single
 168 0070 24000000 		.word	.LC1
 169 0074 00000000 		.word	.LANCHOR0
 170 0078 00000000 		.word	.LC0
 171              		.cfi_endproc
 172              	.LFE52:
 174              		.section	.rodata.lv_img_cache_set_size.str1.4,"aMS",%progbits,1
 175              		.align	2
 176              	.LC2:
 177 0000 43616E27 		.ascii	"Can't change cache size because it's disabled by LV"
 177      74206368 
 177      616E6765 
 177      20636163 
 177      68652073 
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 7


 178 0033 5F494D47 		.ascii	"_IMG_CACHE_DEF_SIZE = 0\000"
 178      5F434143 
 178      48455F44 
 178      45465F53 
 178      495A4520 
 179              		.section	.text.lv_img_cache_set_size,"ax",%progbits
 180              		.align	1
 181              		.global	lv_img_cache_set_size
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	lv_img_cache_set_size:
 188              	.LVL18:
 189              	.LFB53:
 142:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 143:lvgl/lvgl/src/draw/lv_img_cache.c **** /**
 144:lvgl/lvgl/src/draw/lv_img_cache.c ****  * Set the number of images to be cached.
 145:lvgl/lvgl/src/draw/lv_img_cache.c ****  * More cached images mean more opened image at same time which might mean more memory usage.
 146:lvgl/lvgl/src/draw/lv_img_cache.c ****  * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 147:lvgl/lvgl/src/draw/lv_img_cache.c ****  * @param new_entry_cnt number of image to cache
 148:lvgl/lvgl/src/draw/lv_img_cache.c ****  */
 149:lvgl/lvgl/src/draw/lv_img_cache.c **** void lv_img_cache_set_size(uint16_t new_entry_cnt)
 150:lvgl/lvgl/src/draw/lv_img_cache.c **** {
 190              		.loc 1 150 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 150 1 is_stmt 0 view .LVU40
 195 0000 00B5     		push	{lr}
 196              	.LCFI4:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 14, -4
 199 0002 83B0     		sub	sp, sp, #12
 200              	.LCFI5:
 201              		.cfi_def_cfa_offset 16
 151:lvgl/lvgl/src/draw/lv_img_cache.c **** #if LV_IMG_CACHE_DEF_SIZE == 0
 152:lvgl/lvgl/src/draw/lv_img_cache.c ****     LV_UNUSED(new_entry_cnt);
 202              		.loc 1 152 5 is_stmt 1 view .LVU41
 153:lvgl/lvgl/src/draw/lv_img_cache.c ****     LV_LOG_WARN("Can't change cache size because it's disabled by LV_IMG_CACHE_DEF_SIZE = 0");
 203              		.loc 1 153 5 view .LVU42
 204 0004 054B     		ldr	r3, .L13
 205 0006 0093     		str	r3, [sp]
 206 0008 054B     		ldr	r3, .L13+4
 207 000a 9922     		movs	r2, #153
 208 000c 0549     		ldr	r1, .L13+8
 209 000e 0220     		movs	r0, #2
 210              	.LVL19:
 211              		.loc 1 153 5 is_stmt 0 view .LVU43
 212 0010 FFF7FEFF 		bl	_lv_log_add
 213              	.LVL20:
 214              		.loc 1 153 94 is_stmt 1 view .LVU44
 154:lvgl/lvgl/src/draw/lv_img_cache.c **** #else
 155:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 156:lvgl/lvgl/src/draw/lv_img_cache.c ****         /*Clean the cache before free it*/
 157:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_img_cache_invalidate_src(NULL);
 158:lvgl/lvgl/src/draw/lv_img_cache.c ****         lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 8


 159:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 160:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 161:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Reallocate the cache*/
 162:lvgl/lvgl/src/draw/lv_img_cache.c ****     LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(_lv_img_cache_entry_t) * new_entry_cnt);
 163:lvgl/lvgl/src/draw/lv_img_cache.c ****     LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_img_cache_array));
 164:lvgl/lvgl/src/draw/lv_img_cache.c ****     if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 165:lvgl/lvgl/src/draw/lv_img_cache.c ****         entry_cnt = 0;
 166:lvgl/lvgl/src/draw/lv_img_cache.c ****         return;
 167:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 168:lvgl/lvgl/src/draw/lv_img_cache.c ****     entry_cnt = new_entry_cnt;
 169:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 170:lvgl/lvgl/src/draw/lv_img_cache.c ****     /*Clean the cache*/
 171:lvgl/lvgl/src/draw/lv_img_cache.c ****     lv_memset_00(LV_GC_ROOT(_lv_img_cache_array), entry_cnt * sizeof(_lv_img_cache_entry_t));
 172:lvgl/lvgl/src/draw/lv_img_cache.c **** #endif
 173:lvgl/lvgl/src/draw/lv_img_cache.c **** }
 215              		.loc 1 173 1 is_stmt 0 view .LVU45
 216 0014 03B0     		add	sp, sp, #12
 217              	.LCFI6:
 218              		.cfi_def_cfa_offset 4
 219              		@ sp needed
 220 0016 5DF804FB 		ldr	pc, [sp], #4
 221              	.L14:
 222 001a 00BF     		.align	2
 223              	.L13:
 224 001c 00000000 		.word	.LC2
 225 0020 00000000 		.word	.LANCHOR1
 226 0024 00000000 		.word	.LC0
 227              		.cfi_endproc
 228              	.LFE53:
 230              		.section	.text.lv_img_cache_invalidate_src,"ax",%progbits
 231              		.align	1
 232              		.global	lv_img_cache_invalidate_src
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	lv_img_cache_invalidate_src:
 239              	.LVL21:
 240              	.LFB54:
 174:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 175:lvgl/lvgl/src/draw/lv_img_cache.c **** /**
 176:lvgl/lvgl/src/draw/lv_img_cache.c ****  * Invalidate an image source in the cache.
 177:lvgl/lvgl/src/draw/lv_img_cache.c ****  * Useful if the image source is updated therefore it needs to be cached again.
 178:lvgl/lvgl/src/draw/lv_img_cache.c ****  * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 179:lvgl/lvgl/src/draw/lv_img_cache.c ****  */
 180:lvgl/lvgl/src/draw/lv_img_cache.c **** void lv_img_cache_invalidate_src(const void * src)
 181:lvgl/lvgl/src/draw/lv_img_cache.c **** {
 241              		.loc 1 181 1 is_stmt 1 view -0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 182:lvgl/lvgl/src/draw/lv_img_cache.c ****     LV_UNUSED(src);
 246              		.loc 1 182 5 view .LVU47
 183:lvgl/lvgl/src/draw/lv_img_cache.c **** #if LV_IMG_CACHE_DEF_SIZE
 184:lvgl/lvgl/src/draw/lv_img_cache.c ****     _lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 185:lvgl/lvgl/src/draw/lv_img_cache.c **** 
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 9


 186:lvgl/lvgl/src/draw/lv_img_cache.c ****     uint16_t i;
 187:lvgl/lvgl/src/draw/lv_img_cache.c ****     for(i = 0; i < entry_cnt; i++) {
 188:lvgl/lvgl/src/draw/lv_img_cache.c ****         if(src == NULL || lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 189:lvgl/lvgl/src/draw/lv_img_cache.c ****             if(cache[i].dec_dsc.src != NULL) {
 190:lvgl/lvgl/src/draw/lv_img_cache.c ****                 lv_img_decoder_close(&cache[i].dec_dsc);
 191:lvgl/lvgl/src/draw/lv_img_cache.c ****             }
 192:lvgl/lvgl/src/draw/lv_img_cache.c **** 
 193:lvgl/lvgl/src/draw/lv_img_cache.c ****             lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
 194:lvgl/lvgl/src/draw/lv_img_cache.c ****         }
 195:lvgl/lvgl/src/draw/lv_img_cache.c ****     }
 196:lvgl/lvgl/src/draw/lv_img_cache.c **** #endif
 197:lvgl/lvgl/src/draw/lv_img_cache.c **** }
 247              		.loc 1 197 1 is_stmt 0 view .LVU48
 248 0000 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE54:
 252              		.section	.rodata.__func__.8050,"a"
 253              		.align	2
 254              		.set	.LANCHOR0,. + 0
 257              	__func__.8050:
 258 0000 5F6C765F 		.ascii	"_lv_img_cache_open\000"
 258      696D675F 
 258      63616368 
 258      655F6F70 
 258      656E00
 259              		.section	.rodata.__func__.8054,"a"
 260              		.align	2
 261              		.set	.LANCHOR1,. + 0
 264              	__func__.8054:
 265 0000 6C765F69 		.ascii	"lv_img_cache_set_size\000"
 265      6D675F63 
 265      61636865 
 265      5F736574 
 265      5F73697A 
 266              		.text
 267              	.Letext0:
 268              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 269              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 270              		.file 4 "lvgl/lvgl/src/draw/../misc/lv_types.h"
 271              		.file 5 "lvgl/lvgl/src/draw/../misc/lv_color.h"
 272              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 273              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 274              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 275              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 276              		.file 10 "lvgl/lvgl/src/draw/../misc/lv_area.h"
 277              		.file 11 "lvgl/lvgl/src/draw/lv_img_buf.h"
 278              		.file 12 "lvgl/lvgl/src/draw/lv_img_decoder.h"
 279              		.file 13 "lvgl/lvgl/src/draw/lv_img_cache.h"
 280              		.file 14 "lvgl/lvgl/src/draw/../misc/../font/lv_font.h"
 281              		.file 15 "lvgl/lvgl/src/draw/../misc/lv_txt.h"
 282              		.file 16 "lvgl/lvgl/src/draw/lv_draw_mask.h"
 283              		.file 17 "lvgl/lvgl/src/draw/../misc/lv_mem.h"
 284              		.file 18 "lvgl/lvgl/src/draw/../misc/lv_ll.h"
 285              		.file 19 "lvgl/lvgl/src/draw/../misc/lv_timer.h"
 286              		.file 20 "lvgl/lvgl/src/draw/../misc/../core/lv_obj_pos.h"
 287              		.file 21 "lvgl/lvgl/src/draw/../misc/lv_gc.h"
 288              		.file 22 "lvgl/lvgl/src/draw/../misc/lv_log.h"
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 10


 289              		.file 23 "lvgl/lvgl/src/draw/../hal/lv_hal_tick.h"
ARM GAS  C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s 			page 11


DEFINED SYMBOLS
                            *ABS*:00000000 lv_img_cache.c
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:18     .rodata._lv_img_cache_open.str1.4:00000000 $d
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:25     .text._lv_img_cache_open:00000000 $t
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:33     .text._lv_img_cache_open:00000000 _lv_img_cache_open
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:167    .text._lv_img_cache_open:0000006c $d
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:175    .rodata.lv_img_cache_set_size.str1.4:00000000 $d
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:180    .text.lv_img_cache_set_size:00000000 $t
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:187    .text.lv_img_cache_set_size:00000000 lv_img_cache_set_size
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:224    .text.lv_img_cache_set_size:0000001c $d
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:231    .text.lv_img_cache_invalidate_src:00000000 $t
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:238    .text.lv_img_cache_invalidate_src:00000000 lv_img_cache_invalidate_src
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:253    .rodata.__func__.8050:00000000 $d
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:257    .rodata.__func__.8050:00000000 __func__.8050
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:260    .rodata.__func__.8054:00000000 $d
C:\Users\gx\AppData\Local\Temp\ccpe3U1j.s:264    .rodata.__func__.8054:00000000 __func__.8054

UNDEFINED SYMBOLS
lv_tick_get
lv_img_decoder_open
_lv_log_add
lv_memset_00
lv_tick_elaps
_lv_img_cache_single
